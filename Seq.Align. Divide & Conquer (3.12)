/**
 * @author Olivia Meier
 * @date April 18, 2023
 */

public class SequenceAlignmentDivideConquer {
	
	
	static char[] x = {'A', 'C', 'G', 'T', 'C'};
	static char[] y = {'T', 'A', 'A', 'C', 'T', 'G', 'C'};
	static int m = x.length;
	static int n = y.length;
	static int count = 0;							
	
	
	public static void main (String[] args) { 
		//timing code
		long begin = System.nanoTime(); //start timer
		
		//run algorithm
		int optimalCost = opt(0,0);
		
		long end = System.nanoTime(); 	//end timer
		long time = end - begin;		//calculate total time
		System.out.println("The algorithm took " + time + " ns.");	//print time 
		
		//System.out.println("The number of comparisons is: " + count);
		
		System.out.println("The cost of optimal alignment is: " + optimalCost);	//print optimal cost 
	}

	public static int opt (int i, int j){
		int optCost = 0;
		int penalty = 0;
		
		
		if (i == m) {
			optCost = 2 * (n - j);
			//count = count + 1;
		} else if (j == n) {
			optCost = 2 * (m - i);
			//count = count + 2;
		} else {
			if (x[i] == y[j]) {
				penalty = 0;
				//count = count + 1;
			} else {
				penalty = 1;
				//count = count + 1;
			}
			
			//count = count + 3;
			optCost = Math.min(opt(i + 1, j + 1) + penalty, Math.min(opt(i + 1, j) + 2, opt(i, j + 1) + 2));
		}
		
		return optCost;
	}
	
	
	/*
	 * Pseudo Code:
	 * 
	 * void opt (int i, int j){
	 * 
	 * 		if ( i == m)
	 * 			opt = 2(n - j);
	 * 		else if (j == n)
	 * 			opt = 2(m - i);
	 * 		else{
	 * 			if (x[i] == y[i])
	 * 				penalty = 0;
	 * 			else
	 * 				penalty = 1;
	 * 			opt = min(opt(i + 1, j + 1) + penalty, opt(i + 1, j) + 2, opt(i, j + 1) + 2);
	 * 
	 * }
	 */
	
}
