/**
	 * @author Olivia Meier
	 * @date April 18, 2023
	 */

public class SequenceAlignDynamicProg {
		
		static char[] x = {'A', 'A', 'C', 'A', 'G', 'T', 'T', 'A', 'C', 'C'};
		static char[] y = {'T', 'A', 'A', 'G', 'G', 'T', 'C', 'A'};
		static int m = x.length;
		static int n = y.length;
		//static int optCost = 0;
		//static int penalty = 0;
		
		
		public static void main (String[] args) { 
			
			//print optimal alignment 
			alignment();
		}
		
		//method to calculate minimum of 3 integers
		private static int min(int a, int b, int c) {
			// TODO Auto-generated method stub
			if (a <= b && a <= c) {
			   return a;
			} else if (b <= c && b <= a) {
			   return b;
			} else {
			   return c;
			}
		}
		
		public static void alignment(){
			int penalty;
			//int optCost = 0;
			
			//create the (m+1) x (n+1) array
	        int[][] align = new int[m + 1][n + 1];
	        
	       //initialize the first row and column of the array
	        for (int i = 0; i <= m; i++) {
	           align[i][0] = i * 2;
	        }
	        for (int j = 0; j <= n; j++) {
	           align[0][j] = j * 2;
	        }
	        
	        //fill in the rest of the array using the dynamic programming algorithm
	        for (int i = 1; i <= m; i++) {
	            for (int j = 1; j <= n; j++) {
	                if (x.length == y.length) {
	                	penalty = 0;
	                }
	                else {
	                	penalty = 1;
	                }
	                int case1 = align[i-1][j-1] + penalty; 
	                int case2 = align[i-1][j] + 2; 
	                int case3 = align[i][j-1] + 2; 
	                align[i][j] = min(case1, case2, case3); 
	            }
	        }
	        
	        //print optimal alignment array 
	        for(int i = 0; i <= x.length; i++) {
	        	for(int j = 0; j <= y.length; j++) {
	        		System.out.print(align[i][j] + " ");
	        	}
	        	System.out.println();
	        }
	        
	        System.out.println(align[m-1][n-1]);
	    
	        /* EXTRA CREDIT
	        //print aligned DNA sequences
	        String alignedX = "";
	        String alignedY = "";
	        int i = m;
	        int j = n;

	        while (i > 0 || j > 0) {
	            if (i > 0 && j > 0 && align[i][j] == align[i-1][j-1] + (x[i-1] == y[j-1] ? 0 : 1)) {
	                alignedX = x[i-1] + alignedX;
	                alignedY = y[j-1] + alignedY;
	                i--;
	                j--;
	            } else if (j > 0 && align[i][j] == align[i][j-1] + 2) {
	                alignedX = "-" + alignedX;
	                alignedY = y[j-1] + alignedY;
	                j--;
	            } else {
	                alignedX = x[i-1] + alignedX;
	                alignedY = "-" + alignedY;
	                i--;
	            }
	        }

	        System.out.println("Aligned X: " + alignedX);
	        System.out.println("Aligned Y: " + alignedY);
			*/
		}
		
		/*
		 * Pseudo Code:
		 * 
		 * void opt (int i, int j){
		 * 
		 * 		if ( i == m)
		 * 			opt = 2(n - j);
		 * 		else if (j == n)
		 * 			opt = 2(m - i);
		 * 		else{
		 * 			if (x[i] == y[i])
		 * 				penalty = 0;
		 * 			else
		 * 				penalty = 1;
		 * 			opt = min(opt(i + 1, j + 1) + penalty, opt(i + 1, j) + 2, opt(i, j + 1) + 2);
		 * 
		 * }
		 */
		
}

